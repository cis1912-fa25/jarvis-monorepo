services:
  auth-service:
    env_file:
    - ./backend/services/auth/docker.env
    build:
      context: ./backend
      dockerfile: ./services/auth/Dockerfile
    ports:
      - "8000:8000"
    expose:
      - "8000"
    command: ["uv", "run", "fastapi", "dev", "main.py", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    restart: unless-stopped
    depends_on:
      - db
    volumes:
      - ./backend/services/auth/app:/service/app/app
      - ./backend/services/auth/main.py:/service/app/main.py

  notes-service:
    env_file:
      - ./backend/services/notes/docker.env
    build:
      context: ./backend
      dockerfile: ./services/notes/Dockerfile
    ports:
      - "8001:8000"
    expose:
      - "8000"
    command: ["uv", "run", "fastapi", "dev", "main.py", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    restart: unless-stopped
    depends_on:
      - db
      - auth-service
    volumes:
      - ./backend/services/notes/app:/service/app/app
      - ./backend/services/notes/main.py:/service/app/main.py

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: jarvis
      POSTGRES_USER: jarvis
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvis -d jarvis"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data  # Persist data with a volume

volumes:
  db_data: